{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "iotHubSku": {
      "type": "object",
      "defaultValue": {
        "name": "F1",
        "tier": "Free",
        "capacity": 1
      }
    },
    "storageAccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [ "Standard_LRS", "Standard_ZRS", "Standard_GRS", "Standard_RAGRS", "Premium_LRS" ]
    },
    "sqlServiceObjectiveName": {
      "type": "string",
      "defaultValue": "Basic",
      "allowedValues": [ "Basic", "S0", "S1", "S2", "S3", "P1", "P2", "P4", "P6", "P11", "ElasticPool" ]
    },
    "sqlDBEdition": {
      "type": "string",
      "defaultValue": "Basic",
      "allowedValues": [ "Basic", "Standard", "Premium" ]
    },
    "sqlServerAdminPassword": {
      "type": "securestring"
    },
    "sqlAnalyticsServerAdminPassword": {
      "type": "securestring"
    },
    "hostingPlanSku": {
      "type": "object",
      "defaultValue": {
        "tier": "Free",
        "name": "F1",
        "capacity": 0
      }
    },
    "mobileAppRepositoryUrl":
    {
      "type": "string",
      "defaultValue": "https://github.com/f2bo/f2botrips.git" /* TODO: REPLACE WITH mydriving APPLICATION */
    }
  },
  "variables": {
    "baseName": "mydriving",
    /* Storage settings*/
    "blobStorageAnalytics": "[substring(toLower(concat(variables('baseName'), 'str', uniquestring(resourceGroup().id), '0000000000')), 0, 24)]",
    "blobStorageHdiMetastore": "[substring(toLower(concat(variables('baseName'), 'logs', uniquestring(resourceGroup().id), '0000000000')), 0, 24)]",
    "assetsContainerName": "mydrivinghdi", /* if you change this value, remember to also update the same variable in prerequisites.json */
    /* IoT Hub settings */
    "iotHubName": "[concat(variables('baseName'), '-', uniquestring(resourceGroup().id))]",
    "iotHubKeyName": "iothubowner",
    /* Event Hub settings */
    "eventHubNamespace": "[concat(variables('baseName'), '-', 'ns', '-', uniquestring(resourceGroup().id))]",
    "eventHubName": "[variables('baseName')]",
    /* TODO: Review if we can create a SAS Key */ "eventHubKeyName": "RootManageSharedAccessKey",
    /* SQL Server settings */
    "sqlServerName": "[toLower(concat(variables('baseName'), 'dbserver', '-', uniquestring(resourceGroup().id)))]",
    "sqlServerAdminLogin": "scott",
    "sqlDBName": "[concat(variables('baseName'), 'DB')]",
    "sqlDBEdition": "[parameters('sqlDBEdition')]",
    "sqlServiceObjectiveName": "[parameters('sqlServiceObjectiveName')]",
    /* SQL Server settings - Analytics */
    "sqlAnalyticsServerName": "[toLower(concat(variables('baseName'), '-', 'dbserver', '-', uniquestring(resourceGroup().id)))]",
    "sqlAnalyticsServerAdminLogin": "scott",
    "sqlAnalyticsDBName": "[concat(variables('baseName'), 'AnalyticsDB')]",
    "sqlAnalyticsDBEdition": "[parameters('sqlDBEdition')]",
    "sqlAnalyticsServiceObjectiveName": "[parameters('sqlServiceObjectiveName')]",
    /* SQL Server settings - Shared */
    "sqlServerVersion": "12.0",
    "sqlFirewallIpStart": "0.0.0.0",
    "sqlFirewallIpEnd": "255.255.255.255",
    "sqlCollation": "SQL_Latin1_General_CP1_CI_AS",
    /* ASA Job settings */
    "archiveJobName": "[concat(variables('baseName'), '-archive')]",
    "archiveJobQuery": "SELECT\r\n\tTripId,\r\n\tUserId,\r\n\tName,\r\n\tTripDataPoint.TripPointId as TripPointId,\r\n\tTripDataPoint.Lat as Lat,\r\n\tTripDataPoint.Lon as Lon,\r\n\tTripDataPoint.Speed as Speed,\r\n\tTripDataPoint.RecordedTimeStamp as RecordedTimeStamp,\r\n\tTripDataPoint.Sequence as Sequence,\r\n\tTripDataPoint.EngineRPM as EngineRPM,\r\n\tTripDataPoint.ShortTermFuelBank1 as ShortTermFuelBank,\r\n\tTripDataPoint.LongTermFuelBank1 as LongTermFuelBank,\r\n\tTripDataPoint.ThrottlePosition as ThrottlePosition,\r\n\tTripDataPoint.RelativeThrottlePosition as RelativeThrottlePosition,\r\n\tTripDataPoint.Runtime as Runtime,\r\n\tTripDataPoint.DistancewithMIL as DistancewithMIL,\r\n\tTripDataPoint.EngineLoad as EngineLoad,\r\n\tTripDataPoint.MAFFlowRate as MAFFlowRate,\r\n\tTripDataPoint.OutsideTemperature as OutsideTemperature,\r\n\tTripDataPoint.EngineFuelRate as EngineFuelRate,\r\n\tTripDataPoint.VIN as vin\r\nINTO\r\n\tBlobSink\r\nFROM\r\n\tCarDeviceData\r\nWHERE\r\n\tTripId is not null\r\n\tand UserId is not null\r\n\tand TripId != ''\r\n\tand UserId != ''\r\n",
    "archiveJobConsumerGroupName": "asa-blobarchive",
    "archiveJobContainerName": "rawdata",
    "hourlypbiJobName": "[concat(variables('baseName'), '-hourlypbi')]",
    "hourlypbiJobQuery": "WITH TripPointRaw as \r\n(\r\nSELECT\r\n\tTripId,\r\n\tUserId,\r\n\tTripDataPoint.Lat as RawLat,\r\n\tTripDataPoint.Lon as RawLong,\r\n\tCAST(TripDataPoint.Speed as FLOAT) as spd,\r\n\tCAST(TripDataPoint.EngineRPM as FLOAT) as enginerpm,\r\n\tCAST(TripDataPoint.EngineLoad as FLOAT) as engineLoad,\r\n\tCAST(TripDataPoint.ShortTermFuelBank1 as FLOAT) as shortTermFuelBank,\r\n\tCAST(TripDataPoint.LongTermFuelBank1 as FLOAT) as longTermFuelBank,\r\n\tCAST(TripDataPoint.MAFFlowRate as FLOAT) as flowRate,\r\n\tCAST(TripDataPoint.ThrottlePosition as FLOAT) as throttlePos,\r\n\tCAST(TripDataPoint.Runtime as FLOAT) as runtime,\r\n\tCAST(TripDataPoint.DistanceWithMIL as FLOAT) as distanceWithMIL,\r\n\tCAST(TripDataPoint.RelativeThrottlePosition as FLOAT) as relativeThrottlePos,\r\n\tCAST(TripDataPoint.OutsideTemperature as FLOAT) as outsideTemperature,\r\n\tCAST(TripDataPoint.EngineFuelRate as FLOAT) as engineFuelRate,\r\n\tTripDataPoint.RecordedTimeStamp as actualTS,\r\n\tDATEADD(millisecond,- DATEPART(millisecond,TripDataPoint.RecordedTimeStamp),DATEADD(second, 5 - CAST(CEILING(DATEPART(second, TripDataPoint.RecordedTimeStamp)%5) as BIGINT),TripDataPoint.RecordedTimeStamp)) as ts,\r\n\tDATEDIFF(millisecond, TripDataPoint.RecordedTimeStamp, DATEADD(millisecond,-DATEPART(millisecond,TripDataPoint.RecordedTimeStamp),DATEADD(second, 5 - CAST(CEILING(DATEPART(second, TripDataPoint.RecordedTimeStamp)%5) as BIGINT),TripDataPoint.RecordedTimeStamp))) as tsDiff,\r\n\tTripDataPoint.VIN as vin,\r\n\tTripDataPoint.RelativeThrottlePosition as throttle\r\nFROM\r\n\tCarDeviceData TIMESTAMP by TripDataPoint.RecordedTimeStamp\r\nWHERE\r\n\tTripId is not null\r\n\tand TripId != ''\r\n\tand UserId is not null\r\n\tand UserId != ''\r\n),\r\nTripPointAgg as \r\n(\r\nSELECT \r\n\tTripId,\r\n\tUserId,\r\n\tvin,\r\n\tts,\r\n\tAVG(RawLat) as lat,\r\n\tAVG(RawLong) as lon,\r\n\tMIN(tsDiff) as lastRecTime,\r\n\tMAX(tsDiff) as firstRecTime,\r\n\tMIN(spd) as minSpeed,\r\n\tMAX(spd) as maxSpeed,\r\n\tAVG(spd) as avgSpeed,\r\n\tAVG(engineLoad) as avgEngineLoad,\r\n\tAVG(shortTermFuelBank) as avgShortTermFuelBank,\r\n\tAVG(longTermFuelBank) as avgLongTermFuelBank,\r\n\tMAX(enginerpm) as maxEngineRpm,\r\n\tAVG(flowRate) as avgFlowRate,\r\n\tAVG(throttlePos) as avgThrottlePos,\r\n\tMAX(runtime) as maxRuntime,\r\n\tMAX(distanceWithMIL) as maxDistanceWithMIL,\r\n\tAVG(relativeThrottlePos) as avgRelativeThrottlePos,\r\n\tAVG(outsideTemperature) as avgOutsideTemperature,\r\n\tAVG(engineFuelRate) as avgEngineFuelRate\r\nFROM\r\n\tTripPointRaw\r\nWHERE\r\n\tts is not null\r\nGROUP BY\r\n\tTripId,\r\n\tUserId,\r\n\tvin,\r\n\tts,\r\n\tTumblingWindow(hour,1)\t\r\n),\r\nRoughDrivingStats as \r\n(\r\nSELECT\r\n\tt1.TripId,\r\n\tt1.UserId,\r\n\tt1.lat,\r\n\tt1.lon,\r\n\tCASE\r\n\t\tWHEN t3.spd - t2.spd > 50 THEN 2\r\n\t\tWHEN t2.spd - t3.spd > 70 OR t1.maxSpeed - t1.minSpeed > 70 OR t1.maxSpeed - t1.avgSpeed > t1.avgSpeed - t1.minSpeed + 0.10*(t1.maxSpeed - t1.minSpeed) THEN 1\r\n\t\tELSE 0\r\n\tEND as POIType,\r\n\tt1.ts,\r\n\tt1.avgSpeed,\r\n\tt1.minSpeed,\r\n\tt1.maxSpeed,\r\n\tt1.avgEngineLoad,\r\n\tt1.avgShortTermFuelBank,\r\n\tt1.avgLongTermFuelBank,\r\n\tt1.maxEngineRpm,\r\n\tt1.avgFlowRate,\r\n\tt1.avgThrottlePos,\r\n\tt1.maxRuntime,\r\n\tt1.maxDistanceWithMIL,\r\n\tt1.avgRelativeThrottlePos,\r\n\tt1.avgOutsideTemperature,\r\n\tt1.avgEngineFuelRate,\r\n\tt3.spd as firstSpeed,\r\n\tt2.spd as lastSpeed\r\nFROM TripPointAgg t1\r\nJOIN TripPointRaw t2\r\nON t1.TripId = t2.TripId and \r\nt1.vin = t2.vin and \r\nt1.ts = t2.ts and\r\nt1.lastRecTime = t2.tsDiff and\r\nDATEDIFF(minute,t1,t2) BETWEEN 0 and 0\r\nJOIN TripPointRaw t3\r\nON t1.TripId = t3.TripId and \r\nt1.vin = t3.vin and \r\nt1.ts = t3.ts and\r\nt1.firstRecTime = t3.tsDiff and\r\nDATEDIFF(minute,t1,t3) BETWEEN 0 and 0\r\n)\r\n\r\nSELECT\r\n\tTripId,\r\n\tlat as Latitude,\r\n\tlon as Longitude,\r\n\tPOIType,\r\n\tts as RecordedTimeStamp\r\nINTO PowerBISink\r\nFROM RoughDrivingStats\r\nWHERE POIType > 0",
    "hourlypbiJobConsumerGroupName": "asa-pbihourly",
    "sqlpbiJobName": "[concat(variables('baseName'), '-sqlpbi')]",
    "sqlpbiJobQuery": "WITH TripPointRaw as \r\n(\r\nSELECT\r\n\tTripId,\r\n\tUserId,\r\n\tTripDataPoint.Lat as RawLat,\r\n\tTripDataPoint.Lon as RawLong,\r\n\tCAST(TripDataPoint.Speed as FLOAT) as spd,\r\n\tCAST(TripDataPoint.EngineRPM as FLOAT) as enginerpm,\r\n\tCAST(TripDataPoint.EngineLoad as FLOAT) as engineLoad,\r\n\tCAST(TripDataPoint.ShortTermFuelBank1 as FLOAT) as shortTermFuelBank,\r\n\tCAST(TripDataPoint.LongTermFuelBank1 as FLOAT) as longTermFuelBank,\r\n\tCAST(TripDataPoint.MAFFlowRate as FLOAT) as flowRate,\r\n\tCAST(TripDataPoint.ThrottlePosition as FLOAT) as throttlePos,\r\n\tCAST(TripDataPoint.Runtime as FLOAT) as runtime,\r\n\tCAST(TripDataPoint.DistanceWithMIL as FLOAT) as distanceWithMIL,\r\n\tCAST(TripDataPoint.RelativeThrottlePosition as FLOAT) as relativeThrottlePos,\r\n\tCAST(TripDataPoint.OutsideTemperature as FLOAT) as outsideTemperature,\r\n\tCAST(TripDataPoint.EngineFuelRate as FLOAT) as engineFuelRate,\r\n\tTripDataPoint.RecordedTimeStamp as actualTS,\r\n\tDATEADD(millisecond,- DATEPART(millisecond,TripDataPoint.RecordedTimeStamp),DATEADD(second, 5 - CAST(CEILING(DATEPART(second, TripDataPoint.RecordedTimeStamp)%5) as BIGINT),TripDataPoint.RecordedTimeStamp)) as ts,\r\n\tDATEDIFF(millisecond, TripDataPoint.RecordedTimeStamp, DATEADD(millisecond,-DATEPART(millisecond,TripDataPoint.RecordedTimeStamp),DATEADD(second, 5 - CAST(CEILING(DATEPART(second, TripDataPoint.RecordedTimeStamp)%5) as BIGINT),TripDataPoint.RecordedTimeStamp))) as tsDiff,\r\n\tTripDataPoint.VIN as vin,\r\n\tTripDataPoint.RelativeThrottlePosition as throttle\r\nFROM\r\n\tCarDeviceData TIMESTAMP by TripDataPoint.RecordedTimeStamp\r\nWHERE\r\n\tTripId is not null\r\n\tand TripId != ''\r\n\tand UserId is not null\r\n\tand UserId != ''\r\n),\r\nTripPointAgg as \r\n(\r\nSELECT \r\n\tTripId,\r\n\tUserId,\r\n\tvin,\r\n\tts,\r\n\tAVG(RawLat) as lat,\r\n\tAVG(RawLong) as lon,\r\n\tMIN(tsDiff) as lastRecTime,\r\n\tMAX(tsDiff) as firstRecTime,\r\n\tMIN(spd) as minSpeed,\r\n\tMAX(spd) as maxSpeed,\r\n\tAVG(spd) as avgSpeed,\r\n\tAVG(engineLoad) as avgEngineLoad,\r\n\tAVG(shortTermFuelBank) as avgShortTermFuelBank,\r\n\tAVG(longTermFuelBank) as avgLongTermFuelBank,\r\n\tMAX(enginerpm) as maxEngineRpm,\r\n\tAVG(flowRate) as avgFlowRate,\r\n\tAVG(throttlePos) as avgThrottlePos,\r\n\tMAX(runtime) as maxRuntime,\r\n\tMAX(distanceWithMIL) as maxDistanceWithMIL,\r\n\tAVG(relativeThrottlePos) as avgRelativeThrottlePos,\r\n\tAVG(outsideTemperature) as avgOutsideTemperature,\r\n\tAVG(engineFuelRate) as avgEngineFuelRate\r\nFROM\r\n\tTripPointRaw\r\nWHERE\r\n\tts is not null\r\nGROUP BY\r\n\tTripId,\r\n\tUserId,\r\n\tvin,\r\n\tts,\r\n\tTumblingWindow(second,5)\t\r\n),\r\nRoughDrivingStats as \r\n(\r\nSELECT\r\n\tt1.TripId,\r\n\tt1.UserId,\r\n\tt1.lat,\r\n\tt1.lon,\r\n\tCASE\r\n\t\tWHEN t3.spd - t2.spd > 50 THEN 2\r\n\t\tWHEN t2.spd - t3.spd > 70 OR t1.maxSpeed - t1.minSpeed > 70 OR t1.maxSpeed - t1.avgSpeed > t1.avgSpeed - t1.minSpeed + 0.10*(t1.maxSpeed - t1.minSpeed) THEN 1\r\n\t\tELSE 0\r\n\tEND as POIType,\r\n\tt1.ts,\r\n\tt1.avgSpeed,\r\n\tt1.minSpeed,\r\n\tt1.maxSpeed,\r\n\tt1.avgEngineLoad,\r\n\tt1.avgShortTermFuelBank,\r\n\tt1.avgLongTermFuelBank,\r\n\tt1.maxEngineRpm,\r\n\tt1.avgFlowRate,\r\n\tt1.avgThrottlePos,\r\n\tt1.maxRuntime,\r\n\tt1.maxDistanceWithMIL,\r\n\tt1.avgRelativeThrottlePos,\r\n\tt1.avgOutsideTemperature,\r\n\tt1.avgEngineFuelRate,\r\n\tt3.spd as firstSpeed,\r\n\tt2.spd as lastSpeed\r\nFROM TripPointAgg t1\r\nJOIN TripPointRaw t2\r\nON t1.TripId = t2.TripId and \r\nt1.vin = t2.vin and \r\nt1.ts = t2.ts and\r\nt1.lastRecTime = t2.tsDiff and\r\nDATEDIFF(minute,t1,t2) BETWEEN 0 and 0\r\nJOIN TripPointRaw t3\r\nON t1.TripId = t3.TripId and \r\nt1.vin = t3.vin and \r\nt1.ts = t3.ts and\r\nt1.firstRecTime = t3.tsDiff and\r\nDATEDIFF(minute,t1,t3) BETWEEN 0 and 0\r\n)\r\n\r\nSELECT\r\n\tTripId,\r\n\tlat as Latitude,\r\n\tlon as Longitude,\r\n\tPOIType,\r\n\tts as RecordedTimeStamp\r\nINTO SQLSink\r\nFROM RoughDrivingStats\r\nWHERE POIType > 0\r\n\r\n\r\nSELECT\r\n\tTripId,\r\n\tUserId,\r\n\tavgEngineLoad as EngineLoad,\r\n\tavgShortTermFuelBank as ShortTermFuelBank1,\r\n\tavgLongTermFuelBank as LongTermFuelBank1,\r\n\tmaxEngineRpm as EngineRPM,\r\n\tavgSpeed as Speed,\r\n\tavgFlowRate as MAFFlowRate,\r\n\tavgThrottlePos as ThrottlePosition,\r\n\tmaxRuntime as Runtime,\r\n\tmaxDistanceWithMIL as DistancewithMIL,\r\n\tavgRelativeThrottlePos as RelativeThrottlePosition,\r\n\tavgOutsideTemperature as OutsideTemperature,\r\n\tavgEngineFuelRate as EngineFuelRate,\r\n\tlat,\r\n\tlon,\r\n\tts as RecordedTimeStamp,\r\n\tPOIType\r\nINTO PowerBISink\r\nFROM RoughDrivingStats",
    "sqlpbiJobConsumerGroupName": "asa-sqlpbi",
    "sqlpbiTableName": "dbo.POIs",
    "vinlookupJobName": "[concat(variables('baseName'), '-vinlookup')]",
    "vinlookupJobQuery": "With VINData as \r\n(\r\nSELECT\r\n\tTripId,\r\n\tTripDataPoint.VIN,\r\n\tcount(*)\r\nFROM\r\n\tCarDeviceData\r\nWHERE\r\n\tTripId is not null AND\r\n\tTripDataPoint.VIN is not null AND\r\n\tTripId != '' AND\r\n\tTripDataPoint.VIN != ''\r\nGROUP BY \r\n\tTripId,\r\n\tTripDataPoint.VIN,\r\n\tTUMBLINGWINDOW(hour,1)\r\n)\r\n\r\nSELECT \r\n\tTripId,\r\n\tVIN\r\nINTO EHSink\r\nFROM VINData",
    "vinlookupJobConsumerGroupName": "asa-vinlookup",
    /* Hostin Plan settings */
    "hostingPlanName": "[concat(variables('baseName'), 'Plan', '-', uniquestring(resourceGroup().id))]",
    /* Mobile App settings */
    "mobileAppName": "[concat(variables('baseName'), '-', uniquestring(resourceGroup().id))]",
    "mobileAppRepositoryBranch": "master",
    /* App Insights settings */
    "appInsightsName": "[concat(variables('baseName'), 'API', '-', uniquestring(resourceGroup().id))]",
    "appInsightsLocation": "centralus", /* App Insights is currently only available in Central US */
    /* Data Factory settings */
    "dataFactoryName": "[concat(variables('baseName'), '-df', uniquestring(resourceGroup().id))]",
    "mlLinkedServiceName": "AzureMLLinkedService",
    "sqlAnalyticsLinkedServiceName": "AzureSqlLinkedService",
    "sqlMobileAppLinkedServiceName": "MobileAppSqlLinkedService",
    "storageAsaLinkedServiceName": "AzureStorageLinkedService",
    "hdiMetastoreLinkedServiceName": "HDIMetastoreBlobLinkedService",
    "hdiOnDemandLinkedServiceName": "DailyComputeHDICluster",
    "datasetDimUserBlob": "DimUser-Blob",
    "datasetDimUserSql": "DimUser-SQL",
    "datasetDimUserTempSql": "DimUserTemp-SQL",
    "datasetFactTripDataBlob": "FactTripData-Blob",
    "datasetFactTripDataSql": "FactTripData-SQL",
    "datasetFactTripDataTempSql": "FactTripDataTemp-SQL",
    "datasetFactTripMLDataSql": "FactTripMLData-SQL",
    "datasetFactTripMLInputDataBlob": "FactTripMLInputData-Blob",
    "datasetFactTripMLOutputDataBlob": "FactTripMLOutputData-Blob",
    "datasetMyDrivingRawDataBlob": "MyDrivingRawData-Blob",
    "datasetRawDataOneSecAggregated": "RawDataOneSecAggregated",
    "datasetTempIntermediateDatasetBlob": "TempIntermediateDataset-Blob",
    "datasetTempIntermediateDataset2Blob": "TempIntermediateDataset2-Blob",
    "pipelineAzureML": "AzureMLPipeline",
    "pipelineCopyBlobToSql": "CopyPipeline-BlobToSQL",
    "pipelineDimUserComputeHDI": "DimUserCompute-HDI",
    "pipelineFactTripDataComputeHDI": "FactTripDataCompute-HDI",
    "pipelineSetupHiveTables": "SetupHiveTablesPipeline",
    "pipelineSQLSproc": "SQLSprocPipeline",
    "hdInsightScriptsFolder": "hivescripts",
    /* Machine Learning settings */
    "mlEndpoint": "https://ussouthcentral.services.azureml.net/workspaces/5aaa8b190e554515af1acc8d2a09cfdf/services/6f36fd8699674c5787f02cdb5450d63f/jobs?api-version=2.0",
    "mlApiKey": "<TO-BE-COMPLETED>",
    "mlUpdateResourceEndpoint": "https://management.azureml.net/workspaces/5aaa8b190e554515af1acc8d2a09cfdf/webservices/f9d2d0e250614092a9ab3c3cc16629c1/endpoints/retrain"
  },
    "resources": [
      /* Create Storage Account - Analytics */
      {
        "apiVersion": "2015-06-15",
        "type": "Microsoft.Storage/storageAccounts",
        "name": "[variables('blobStorageAnalytics')]",
        "location": "[resourceGroup().location]",
        "properties": { "accountType": "[parameters('storageAccountType')]" }
      },
      /* Create Storage Account - HDI Metastore */
      {
        "apiVersion": "2015-06-15",
        "type": "Microsoft.Storage/storageAccounts",
        "name": "[variables('blobStorageHdiMetastore')]",
        "location": "[resourceGroup().location]",
        "properties": { "accountType": "[parameters('storageAccountType')]" }
      },
      /* Create IoT Hub */
      {
        "apiVersion": "2016-02-03",
        "type": "Microsoft.Devices/IotHubs",
        "name": "[variables('iotHubName')]",
        "location": "[resourceGroup().location]",
        "sku": "[parameters('iotHubSku')]"
      },
      /* Create IoT Hub Consumer Groups */
      {
        "apiVersion": "2016-02-03",
        "name": "[concat(variables('iotHubName'), '/events/', variables('archiveJobConsumerGroupName'))]",
        "type": "Microsoft.Devices/Iothubs/eventhubEndpoints/ConsumerGroups",
        "dependsOn": [
          "[concat('Microsoft.Devices/Iothubs/', variables('iotHubName'))]"
        ]
      },
      {
        "apiVersion": "2016-02-03",
        "name": "[concat(variables('iotHubName'), '/events/', variables('hourlypbiJobConsumerGroupName'))]",
        "type": "Microsoft.Devices/Iothubs/eventhubEndpoints/ConsumerGroups",
        "dependsOn": [
          "[concat('Microsoft.Devices/Iothubs/', variables('iotHubName'))]"
        ]
      },
      {
        "apiVersion": "2016-02-03",
        "name": "[concat(variables('iotHubName'), '/events/', variables('sqlpbiJobConsumerGroupName'))]",
        "type": "Microsoft.Devices/Iothubs/eventhubEndpoints/ConsumerGroups",
        "dependsOn": [
          "[concat('Microsoft.Devices/Iothubs/', variables('iotHubName'))]"
        ]
      },
      {
        "apiVersion": "2016-02-03",
        "name": "[concat(variables('iotHubName'), '/events/', variables('vinlookupJobConsumerGroupName'))]",
        "type": "Microsoft.Devices/Iothubs/eventhubEndpoints/ConsumerGroups",
        "dependsOn": [
          "[concat('Microsoft.Devices/Iothubs/', variables('iotHubName'))]"
        ]
      },
      /* Create Event Hub */
      {
        "apiVersion": "2014-09-01",
        "type": "Microsoft.EventHub/namespaces",
        "name": "[variables('eventHubNamespace')]",
        "location": "[resourceGroup().location]",
        "properties": { "region": "[resourceGroup().location]" },
        "resources": [
          {
            "apiVersion": "2014-09-01",
            "name": "[variables('eventHubName')]",
            "type": "eventHubs",
            "location": "[resourceGroup().location]",
            "dependsOn": [ "[resourceId('Microsoft.EventHub/namespaces', variables('eventHubNamespace'))]" ],
            "properties": { "path": "[variables('eventHubName')]" }
          }
        ]
      },
      /* Create SQL Server */
      {
        "apiVersion": "2014-04-01-preview",
        "type": "Microsoft.Sql/servers",
        "name": "[variables('sqlServerName')]",
        "location": "[resourceGroup().location]",
        "properties": {
          "administratorLogin": "[variables('sqlServerAdminLogin')]",
          "administratorLoginPassword": "[parameters('sqlServerAdminPassword')]",
          "version": "[variables('sqlServerVersion')]"
        },
        "resources": [
          {
            "apiVersion": "2014-04-01-preview",
            "type": "databases",
            "name": "[variables('sqlDBName')]",
            "location": "[resourceGroup().location]",
            "properties": {
              "edition": "[variables('sqlDBEdition')]",
              "requestedServiceObjectiveName": "[variables('sqlServiceObjectiveName')]",
              "collation": "[variables('sqlCollation')]"
            },
            "dependsOn": [ "[resourceId('Microsoft.Sql/servers', variables('sqlServerName'))]" ]
          },
          {
            "apiVersion": "2014-04-01-preview",
            "type": "firewallrules",
            "name": "ARMTemplateRule",
            "location": "[resourceGroup().location]",
            "properties": {
              "startIpAddress": "[variables('sqlFirewallIpStart')]",
              "endIpAddress": "[variables('sqlFirewallIpEnd')]"
            },
            "dependsOn": [ "[resourceId('Microsoft.Sql/servers', variables('sqlServerName'))]" ]
          }
        ]
      },
      /* Create ASA Jobs */
      /* ASA Job: Archive */
      {
        "apiVersion": "2015-09-01",
        "type": "Microsoft.StreamAnalytics/StreamingJobs",
        "name": "[variables('archiveJobName')]",
        "location": "[resourceGroup().location]",
        "properties": {
          /* The only supported value for ASA sku is standard https://msdn.microsoft.com/en-us/library/azure/dn834994.aspx */
          "sku": { "name": "Standard" },
          "inputs": [
            {
              "name": "CarDeviceData",
              "properties": {
                "type": "stream",
                "serialization": {
                  "type": "JSON",
                  "properties": { "encoding": "UTF8" }
                },
                "datasource": {
                  "type": "Microsoft.Devices/IotHubs",
                  "properties": {
                    "iotHubNamespace": "[variables('iotHubName')]",
                    "sharedAccessPolicyName": "[variables('iotHubKeyName')]",
                    "sharedAccessPolicyKey": "[listKeys(resourceId('Microsoft.Devices/IotHubs/Iothubkeys', variables('iotHubName'), variables('iotHubKeyName')), '2016-02-03').primaryKey]",
                    "consumerGroupName": "[variables('archiveJobConsumerGroupName')]"
                  }
                }
              }
            }
          ],
          "transformation": {
            "name": "[variables('archiveJobName')]",
            "properties": {
              "streamingUnits": 1,
              "query": "[variables('archiveJobQuery')]"
            }
          },
          "outputs": [
            {
              "name": "BlobSink",
              "properties": {
                "serialization": {
                  "type": "CSV",
                  "properties": {
                    "fieldDelimiter": ",",
                    "encoding": "UTF8"
                  }
                },
                "datasource": {
                  "type": "Microsoft.Storage/Blob",
                  "properties": {
                    "storageAccounts": [
                      {
                        "accountName": "[variables('blobStorageAnalytics')]",
                        "accountKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('blobStorageAnalytics')), '2015-06-15').key1]"
                      }
                    ],
                    "container": "[variables('archiveJobContainerName')]",
                    "pathPattern": "tripdata/{date}",
                    "dateFormat": "yyyy/MM/dd",
                    "timeFormat": "HH"
                  }
                }
              }
            }
          ]
        },
        "dependsOn": [
          "[resourceId('Microsoft.Devices/IotHubs', variables('iotHubName'))]",
          "[resourceId('Microsoft.Storage/storageAccounts', variables('blobStorageAnalytics'))]"
        ]
      },
      /* ASA Job: Hourly Power BI */
      {
        "apiVersion": "2015-09-01",
        "type": "Microsoft.StreamAnalytics/StreamingJobs",
        "name": "[variables('hourlypbiJobName')]",
        "location": "[resourceGroup().location]",
        "properties": {
          /* The only supported value for ASA sku is standard https://msdn.microsoft.com/en-us/library/azure/dn834994.aspx */
          "sku": { "name": "Standard" },
          "inputs": [
            {
              "name": "CarDeviceData",
              "properties": {
                "type": "stream",
                "serialization": {
                  "type": "JSON",
                  "properties": { "encoding": "UTF8" }
                },
                "datasource": {
                  "type": "Microsoft.Devices/IotHubs",
                  "properties": {
                    "iotHubNamespace": "[variables('iotHubName')]",
                    "sharedAccessPolicyName": "[variables('iotHubKeyName')]",
                    "sharedAccessPolicyKey": "[listKeys(resourceId('Microsoft.Devices/IotHubs/Iothubkeys', variables('iotHubName'), variables('iotHubKeyName')), '2016-02-03').primaryKey]",
                    "consumerGroupName": "[variables('hourlypbiJobConsumerGroupName')]"
                  }
                }
              }
            }
          ],
          "transformation": {
            "name": "[variables('hourlypbiJobName')]",
            "properties": {
              "streamingUnits": 1,
              "query": "[variables('hourlypbiJobQuery')]"
            }
          },
          "outputs": [
          ]
        },
        "dependsOn": [
          "[resourceId('Microsoft.Devices/IotHubs', variables('iotHubName'))]"
        ]
      },
      /* ASA Job: SQL-Power BI */
      {
        "apiVersion": "2015-09-01",
        "type": "Microsoft.StreamAnalytics/StreamingJobs",
        "name": "[variables('sqlpbiJobName')]",
        "location": "[resourceGroup().location]",
        "properties": {
          /* The only supported value for ASA sku is standard https://msdn.microsoft.com/en-us/library/azure/dn834994.aspx */
          "sku": { "name": "Standard" },
          "inputs": [
            {
              "name": "CarDeviceData",
              "properties": {
                "type": "stream",
                "serialization": {
                  "type": "JSON",
                  "properties": { "encoding": "UTF8" }
                },
                "datasource": {
                  "type": "Microsoft.Devices/IotHubs",
                  "properties": {
                    "iotHubNamespace": "[variables('iotHubName')]",
                    "sharedAccessPolicyName": "[variables('iotHubKeyName')]",
                    "sharedAccessPolicyKey": "[listKeys(resourceId('Microsoft.Devices/IotHubs/Iothubkeys', variables('iotHubName'), variables('iotHubKeyName')), '2016-02-03').primaryKey]",
                    "consumerGroupName": "[variables('sqlpbiJobConsumerGroupName')]"
                  }
                }
              }
            }
          ],
          "transformation": {
            "name": "[variables('sqlpbiJobName')]",
            "properties": {
              "streamingUnits": 1,
              "query": "[variables('sqlpbiJobQuery')]"
            }
          },
          "outputs": [
            {
              "name": "SQLSink",
              "properties": {
                "type": "stream",
                "serialization": {
                  "type": "JSON",
                  "properties": { "encoding": "UTF8" }
                },
                "datasource": {
                  "type": "Microsoft.Sql/Server/Database",
                  "properties": {
                    "server": "[variables('sqlServerName')]",
                    "database": "[variables('sqlDBName')]",
                    "user": "[variables('sqlServerAdminLogin')]",
                    "password": "[parameters('sqlServerAdminPassword')]",
                    "table": "[variables('sqlpbiTableName')]"
                  }
                }
              }
            }
          ]
        },
        "dependsOn": [
          "[resourceId('Microsoft.Devices/IotHubs', variables('iotHubName'))]",
          "[resourceId('Microsoft.SQL/servers/databases', variables('sqlServerName'), variables('sqlDBName'))]"
        ]
      },
      /* ASA Job: VIN Lookup */
      {
        "apiVersion": "2015-09-01",
        "type": "Microsoft.StreamAnalytics/StreamingJobs",
        "name": "[variables('vinlookupJobName')]",
        "location": "[resourceGroup().location]",
        "properties": {
          /* The only supported value for ASA sku is standard https://msdn.microsoft.com/en-us/library/azure/dn834994.aspx */
          "sku": { "name": "Standard" },
          "inputs": [
            {
              "name": "CarDeviceData",
              "properties": {
                "type": "stream",
                "serialization": {
                  "type": "JSON",
                  "properties": { "encoding": "UTF8" }
                },
                "datasource": {
                  "type": "Microsoft.Devices/IotHubs",
                  "properties": {
                    "iotHubNamespace": "[variables('iotHubName')]",
                    "sharedAccessPolicyName": "[variables('iotHubKeyName')]",
                    "sharedAccessPolicyKey": "[listKeys(resourceId('Microsoft.Devices/IotHubs/Iothubkeys', variables('iotHubName'), variables('iotHubKeyName')), '2016-02-03').primaryKey]",
                    "consumerGroupName": "[variables('vinlookupJobConsumerGroupName')]"
                  }
                }
              }
            }
          ],
          "transformation": {
            "name": "[variables('vinlookupJobName')]",
            "properties": {
              "streamingUnits": 1,
              "query": "[variables('vinlookupJobQuery')]"
            }
          },
          "outputs": [
            {
              "name": "EHSink",
              "properties": {
                "type": "stream",
                "serialization": {
                  "type": "JSON",
                  "properties": { "encoding": "UTF8" }
                },
                "datasource": {
                  "type": "Microsoft.ServiceBus/EventHub",
                  "properties": {
                    "eventHubName": "[variables('eventHubName')]",
                    "serviceBusNamespace": "[variables('eventHubNamespace')]",
                    "sharedAccessPolicyName": "[variables('eventHubKeyName')]",
                    "sharedAccessPolicyKey": "[listKeys(resourceId('Microsoft.Eventhub/namespaces/authorizationRules', variables('eventHubNamespace'), variables('eventHubKeyName')), '2014-09-01').primaryKey]"
                  }
                }
              }
            }
          ]
        },
        "dependsOn": [
          "[resourceId('Microsoft.Devices/IotHubs', variables('iotHubName'))]",
          "[resourceId('Microsoft.EventHub/namespaces', variables('eventHubNamespace'))]"
        ]
      },
      /* Create Hosting Plan */
      {
        "apiVersion": "2015-08-01",
        "type": "Microsoft.Web/serverfarms",
        "name": "[variables('hostingPlanName')]",
        "location": "[resourceGroup().location]",
        "sku": "[parameters('hostingPlanSku')]",
        "properties": { "numberOfWorkers": 1 }
      },
      /* Create Mobile App */
      {
        "apiVersion": "2015-08-01",
        "type": "Microsoft.Web/sites",
        "name": "[variables('mobileAppName')]",
        "location": "[resourceGroup().location]",
        "kind": "mobileapp",
        "properties": {
          "name": "[variables('mobileAppName')]",
          "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]"
        },
        "resources": [
          {
            "apiVersion": "2015-04-01",
            "name": "web",
            "type": "sourcecontrols",
            "dependsOn": [
              "[resourceId('Microsoft.Web/sites', variables('mobileAppName'))]"
            ],
            "properties": {
              "RepoUrl": "[parameters('mobileAppRepositoryUrl')]",
              "branch": "[variables('mobileAppRepositoryBranch')]",
              "IsManualIntegration": true
            }
          },
          {
            "apiVersion": "2015-08-01",
            "name": "appsettings",
            "type": "config",
            "dependsOn": [
              "[resourceId('Microsoft.Web/Sites', variables('mobileAppName'))]"
            ],
            "properties": {
              "IoTHubConnectionString": "[concat('HostName=', variables('iotHubName'), '.azure-devices.net;SharedAccessKeyName=', variables('iotHubKeyName'), ';SharedAccessKey=', listKeys(resourceId('Microsoft.Devices/IotHubs/Iothubkeys', variables('iotHubName'), variables('iotHubKeyName')), '2016-02-03').primaryKey)]"
            }
          },
          {
            "apiVersion": "2015-08-01",
            "name": "connectionstrings",
            "type": "config",
            "dependsOn": [
              "[resourceId('Microsoft.Web/sites', variables('mobileAppName'))]",
              "[resourceId('Microsoft.Devices/IotHubs', variables('iotHubName'))]",
              "[resourceId('Microsoft.Sql/servers/databases', variables('sqlServerName'), variables('sqlDBName'))]"
            ],
            "properties": {
              "MS_TableConnectionString": {
                "value": "[concat('Data Source=tcp:', reference(concat('Microsoft.Sql/servers/', variables('sqlServerName'))).fullyQualifiedDomainName, ',1433;Initial Catalog=', variables('sqlDBName'), ';User Id=', variables('sqlServerAdminLogin'), '@', variables('sqlServerName'), ';Password=', parameters('sqlServerAdminPassword'), ';')]",
                "type": "SQLAzure"
              }
            }
          }
        ],
        "dependsOn": [ "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]" ]
      },
      /* Create App Insights Component */
      {
        "apiVersion": "2015-05-01",
        "type": "microsoft.insights/components",
        "name": "[variables('appInsightsName')]",
        "location": "[variables('appInsightsLocation')]",
        "kind": "web",
        "properties": { "ApplicationId": "[variables('appInsightsName')]" },
        "dependsOn": [
          "[concat('Microsoft.Web/sites/', variables('mobileAppName'))]"
        ]
      },
      /* Create SQL Server - Analytics */
      {
        "apiVersion": "2014-04-01-preview",
        "type": "Microsoft.Sql/servers",
        "name": "[variables('sqlAnalyticsServerName')]",
        "location": "[resourceGroup().location]",
        "properties": {
          "administratorLogin": "[variables('sqlAnalyticsServerAdminLogin')]",
          "administratorLoginPassword": "[parameters('sqlAnalyticsServerAdminPassword')]",
          "version": "[variables('sqlServerVersion')]"
        },
        "resources": [
          {
            "apiVersion": "2014-04-01-preview",
            "type": "databases",
            "name": "[variables('sqlAnalyticsDBName')]",
            "location": "[resourceGroup().location]",
            "properties": {
              "edition": "[variables('sqlAnalyticsDBEdition')]",
              "requestedServiceObjectiveName": "[variables('sqlAnalyticsServiceObjectiveName')]",
              "collation": "[variables('sqlCollation')]"
            },
            "dependsOn": [ "[resourceId('Microsoft.Sql/servers', variables('sqlAnalyticsServerName'))]" ]
          },
          {
            "apiVersion": "2014-04-01-preview",
            "type": "firewallrules",
            "name": "ARMTemplateRule",
            "location": "[resourceGroup().location]",
            "properties": {
              "startIpAddress": "[variables('sqlFirewallIpStart')]",
              "endIpAddress": "[variables('sqlFirewallIpEnd')]"
            },
            "dependsOn": [ "[resourceId('Microsoft.Sql/servers', variables('sqlAnalyticsServerName'))]" ]
          }
        ]
      },
      /* Create Data Factory */
      {
        "apiVersion": "2015-10-01",
        "type": "Microsoft.DataFactory/datafactories",
        "name": "[variables('dataFactoryName')]",
        "location": "[resourceGroup().location]",
        "resources": [
          /* Linked Service: SQL Database - Analytics */
          {
            "apiVersion": "2015-10-01",
            "type": "linkedservices",
            "name": "[variables('sqlAnalyticsLinkedServiceName')]",
            "properties": {
              "description": "",
              "type": "AzureSqlDatabase",
              "typeProperties": {
                "connectionString": "[concat('Data Source=tcp:', reference(concat('Microsoft.Sql/servers/', variables('sqlAnalyticsServerName'))).fullyQualifiedDomainName, ',1433;Initial Catalog=', variables('sqlAnalyticsDBName'), ';User Id=', variables('sqlAnalyticsServerAdminLogin'), '@', variables('sqlAnalyticsServerName'), ';Password=', parameters('sqlAnalyticsServerAdminPassword'), ';')]"
              }
            },
            "dependsOn": [
              "[resourceId('Microsoft.DataFactory/datafactories', variables('dataFactoryName'))]",
              "[resourceId('Microsoft.SQL/servers/databases', variables('sqlAnalyticsServerName'), variables('sqlAnalyticsDBName'))]"
            ]
          },
          /* Linked Service: SQL Database - Mobile App */
          {
            "apiVersion": "2015-10-01",
            "type": "linkedservices",
            "name": "[variables('sqlMobileAppLinkedServiceName')]",
            "properties": {
              "description": "",
              "type": "AzureSqlDatabase",
              "typeProperties": {
                "connectionString": "[concat('Data Source=tcp:', reference(concat('Microsoft.Sql/servers/', variables('sqlServerName'))).fullyQualifiedDomainName, ',1433;Initial Catalog=', variables('sqlDBName'), ';User Id=', variables('sqlServerAdminLogin'), '@', variables('sqlServerName'), ';Password=', parameters('sqlServerAdminPassword'), ';')]"
              }
            },
            "dependsOn": [
              "[resourceId('Microsoft.DataFactory/datafactories', variables('dataFactoryName'))]",
              "[resourceId('Microsoft.SQL/servers/databases', variables('sqlServerName'), variables('sqlDBName'))]"
            ]
          },
          /* Linked Service: Blob Storage - Analytics */
          {
            "apiVersion": "2015-10-01",
            "type": "linkedservices",
            "name": "[variables('storageAsaLinkedServiceName')]",
            "properties": {
              "description": "",
              "type": "AzureStorage",
              "typeProperties": {
                "connectionString": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('blobStorageAnalytics'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('blobStorageAnalytics')), '2015-06-15').key1)]"
              }
            },
            "dependsOn": [
              "[resourceId('Microsoft.DataFactory/datafactories', variables('dataFactoryName'))]",
              "[resourceId('Microsoft.Storage/storageAccounts', variables('blobStorageAnalytics'))]"
            ]
          },
          /* Linked Service: Blob Storage - HDI Metastore */
          {
            "apiVersion": "2015-10-01",
            "type": "linkedservices",
            "name": "[variables('hdiMetastoreLinkedServiceName')]",
            "properties": {
              "description": "",
              "type": "AzureStorage",
              "typeProperties": {
                "connectionString": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('blobStorageHdiMetastore'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('blobStorageHdiMetastore')), '2015-06-15').key1)]"
              }
            },
            "dependsOn": [
              "[resourceId('Microsoft.DataFactory/datafactories', variables('dataFactoryName'))]",
              "[resourceId('Microsoft.Storage/storageAccounts', variables('blobStorageHdiMetastore'))]"
            ]
          },
          /* Linked Service: HDI Compute Cluster */
          {
            "apiVersion": "2015-10-01",
            "type": "linkedservices",
            "name": "[variables('hdiOnDemandLinkedServiceName')]",
            "properties": {
              "description": "",
              "type": "HDInsightOnDemand",
              "typeProperties": {
                "version": "HDI 3.2",
                "clusterSize": 4,
                "timeToLive": "00:05:00",
                "osType": "Linux",
                "linkedServiceName": "[variables('hdiMetastoreLinkedServiceName')]"
              }
            },
            "dependsOn": [
              "[resourceId('Microsoft.DataFactory/datafactories', variables('dataFactoryName'))]",
              "[resourceId('Microsoft.DataFactory/datafactories/linkedservices', variables('dataFactoryName'), variables('hdiMetastoreLinkedServiceName'))]"
            ]
          },
          /* Linked Service: Machine Learning */
          {
            "apiVersion": "2015-10-01",
            "type": "linkedservices",
            "name": "[variables('mlLinkedServiceName')]",
            "properties": {
              "description": "",
              "type": "AzureML",
              "typeProperties": {
                "mlEndpoint": "[variables('mlEndpoint')]",
                "apiKey": "[variables('mlApiKey')]",
                "updateResourceEndpoint": "[variables('mlUpdateResourceEndpoint')]"
              }
            },
            "dependsOn": [
              "[resourceId('Microsoft.DataFactory/datafactories', variables('dataFactoryName'))]"
            ]
          },
          /* Dataset: DimUser-Blob */
          {
            "apiVersion": "2015-10-01",
            "type": "datasets",
            "name": "[variables('datasetDimUserBlob')]",
            "properties": {
              "type": "AzureBlob",
              "linkedServiceName": "[variables('hdiMetastoreLinkedServiceName')]",
              "typeProperties": {
                "folderPath": "dailycomputehdicluster/hive/warehouse/dimUser",
                "format": {
                  "type": "TextFormat",
                  "rowDelimiter": "\n",
                  "columnDelimiter": "|"
                }
              },
              "structure": [
                {
                  "name": "userId",
                  "type": "String"
                },
                {
                  "name": "vinNum",
                  "type": "Int32"
                }
              ],
              "published": false,
              "availability": {
                "frequency": "Day",
                "interval": 1
              }
            },
            "dependsOn": [
              "[resourceId('Microsoft.DataFactory/datafactories', variables('dataFactoryName'))]",
              "[resourceId('Microsoft.DataFactory/datafactories/linkedServices', variables('dataFactoryName'), variables('hdiMetastoreLinkedServiceName'))]"
            ]
          },
          /* Dataset: DimUser-SQL */
          {
            "apiVersion": "2015-10-01",
            "type": "datasets",
            "name": "[variables('datasetDimUserSql')]",
            "properties": {
              "type": "AzureSqlTable",
              "linkedServiceName": "[variables('sqlAnalyticsLinkedServiceName')]",
              "typeProperties": {
                "tableName": "dbo.dimUser"
              },
              "structure": [
                {
                  "name": "userId",
                  "type": "String"
                },
                {
                  "name": "vin",
                  "type": "Int32"
                }
              ],
              "published": false,
              "availability": {
                "frequency": "Day",
                "interval": 1
              }
            },
            "dependsOn": [
              "[resourceId('Microsoft.DataFactory/datafactories', variables('dataFactoryName'))]",
              "[resourceId('Microsoft.DataFactory/datafactories/linkedServices', variables('dataFactoryName'), variables('sqlAnalyticsLinkedServiceName'))]"
            ]
          },
          /* Dataset: DimUserTemp-SQL */
          {
            "apiVersion": "2015-10-01",
            "type": "datasets",
            "name": "[variables('datasetDimUserTempSql')]",
            "properties": {
              "type": "AzureSqlTable",
              "linkedServiceName": "[variables('sqlAnalyticsLinkedServiceName')]",
              "typeProperties": {
                "tableName": "dbo.dimUserTemp"
              },
              "structure": [
                {
                  "name": "userId",
                  "type": "String"
                },
                {
                  "name": "vin",
                  "type": "Int32"
                }
              ],
              "published": false,
              "availability": {
                "frequency": "Day",
                "interval": 1
              }
            },
            "dependsOn": [
              "[resourceId('Microsoft.DataFactory/datafactories', variables('dataFactoryName'))]",
              "[resourceId('Microsoft.DataFactory/datafactories/linkedServices', variables('dataFactoryName'), variables('sqlAnalyticsLinkedServiceName'))]"
            ]
          },
          /* Dataset: FactTripData-Blob */
          {
            "apiVersion": "2015-10-01",
            "type": "datasets",
            "name": "[variables('datasetFactTripDataBlob')]",
            "properties": {
              "type": "AzureBlob",
              "linkedServiceName": "[variables('hdiMetastoreLinkedServiceName')]",
              "typeProperties": {
                "folderPath": "dailycomputehdicluster/hive/warehouse/factTripData",
                "format": {
                  "type": "TextFormat",
                  "rowDelimiter": "\n",
                  "columnDelimiter": "|"
                }
              },
              "structure": [
                {
                  "name": "TripId",
                  "type": "String"
                },
                {
                  "name": "UserId",
                  "type": "String"
                },
                {
                  "name": "Name",
                  "type": "String"
                },
                {
                  "name": "Lat",
                  "type": "Double"
                },
                {
                  "name": "Lon",
                  "type": "Double"
                },
                {
                  "name": "AvgSpeed",
                  "type": "Double"
                },
                {
                  "name": "AvgEngineRPM",
                  "type": "Double"
                },
                {
                  "name": "AvgShortTermFuelBank",
                  "type": "Double"
                },
                {
                  "name": "AvgLargeTermFuelBank",
                  "type": "Double"
                },
                {
                  "name": "MaxThrottlePosition",
                  "type": "Double"
                },
                {
                  "name": "AvgRelativeThrottlePosition",
                  "type": "Double"
                },
                {
                  "name": "Runtime",
                  "type": "Timespan"
                },
                {
                  "name": "DistancewithMIL",
                  "type": "Double"
                },
                {
                  "name": "EngineLoad",
                  "type": "Double"
                },
                {
                  "name": "MAFFlowRate",
                  "type": "Double"
                },
                {
                  "name": "OutsideTemperature",
                  "type": "Double"
                },
                {
                  "name": "EngineFuelRate",
                  "type": "Double"
                },
                {
                  "name": "vin",
                  "type": "String"
                }
              ],
              "published": false,
              "availability": {
                "frequency": "Day",
                "interval": 1
              }
            },
            "dependsOn": [
              "[resourceId('Microsoft.DataFactory/datafactories', variables('dataFactoryName'))]",
              "[resourceId('Microsoft.DataFactory/datafactories/linkedServices', variables('dataFactoryName'), variables('hdiMetastoreLinkedServiceName'))]"
            ]
          },
          /* Dataset: FactTripData-SQL */
          {
            "apiVersion": "2015-10-01",
            "type": "datasets",
            "name": "[variables('datasetFactTripDataSql')]",
            "properties": {
              "type": "AzureSqlTable",
              "linkedServiceName": "[variables('sqlAnalyticsLinkedServiceName')]",
              "typeProperties": {
                "tableName": "dbo.factTripData"
              },
              "structure": [
                {
                  "name": "TripId",
                  "type": "String"
                },
                {
                  "name": "UserId",
                  "type": "String"
                },
                {
                  "name": "DriverType",
                  "type": "String"
                },
                {
                  "name": "AvgSpeed",
                  "type": "Double"
                },
                {
                  "name": "numOfHardAccel",
                  "type": "Int32"
                },
                {
                  "name": "numOfHardBrakes",
                  "type": "Int32"
                },
                {
                  "name": "wasMILOn",
                  "type": "Double"
                },
                {
                  "name": "tripTime",
                  "type": "Int32"
                },
                {
                  "name": "cLat",
                  "type": "Double"
                },
                {
                  "name": "cLon",
                  "type": "Double"
                }
              ],
              "published": false,
              "availability": {
                "frequency": "Day",
                "interval": 1
              }
            },
            "dependsOn": [
              "[resourceId('Microsoft.DataFactory/datafactories', variables('dataFactoryName'))]",
              "[resourceId('Microsoft.DataFactory/datafactories/linkedServices', variables('dataFactoryName'), variables('sqlAnalyticsLinkedServiceName'))]"
            ]
          },
          /* Dataset: FactTripDataTemp-SQL */
          {
            "apiVersion": "2015-10-01",
            "type": "datasets",
            "name": "[variables('datasetFactTripDataTempSql')]",
            "properties": {
              "structure": [
                {
                  "name": "TripId",
                  "type": "String"
                },
                {
                  "name": "UserId",
                  "type": "String"
                },
                {
                  "name": "AvgSpeed",
                  "type": "Double"
                },
                {
                  "name": "numOfHardAccel",
                  "type": "Int32"
                },
                {
                  "name": "numOfHardBrakes",
                  "type": "Int32"
                },
                {
                  "name": "wasMILOn",
                  "type": "Double"
                },
                {
                  "name": "tripTime",
                  "type": "Int32"
                },
                {
                  "name": "cLat",
                  "type": "Double"
                },
                {
                  "name": "cLon",
                  "type": "Double"
                }
              ],
              "published": false,
              "type": "AzureSqlTable",
              "linkedServiceName": "[variables('sqlAnalyticsLinkedServiceName')]",
              "typeProperties": {
                "tableName": "dbo.factTripDataTemp"
              },
              "availability": {
                "frequency": "Day",
                "interval": 1
              }
            },
            "dependsOn": [
              "[resourceId('Microsoft.DataFactory/datafactories', variables('dataFactoryName'))]",
              "[resourceId('Microsoft.DataFactory/datafactories/linkedServices', variables('dataFactoryName'), variables('sqlAnalyticsLinkedServiceName'))]"
            ]
          },
          /* Dataset: FactTripMLData-SQL */
          {
            "apiVersion": "2015-10-01",
            "type": "datasets",
            "name": "[variables('datasetFactTripMLDataSql')]",
            "properties": {
              "type": "AzureSqlTable",
              "linkedServiceName": "[variables('sqlAnalyticsLinkedServiceName')]",
              "typeProperties": {
                "tableName": "dbo.factTripMLData"
              },
              "structure": [
                {
                  "name": "TripId",
                  "type": "String"
                },
                {
                  "name": "Name",
                  "type": "String"
                },
                {
                  "name": "cLat",
                  "type": "Double"
                },
                {
                  "name": "cLon",
                  "type": "Double"
                },
                {
                  "name": "AvgSpeed",
                  "type": "Double"
                },
                {
                  "name": "AvgEngineRPM",
                  "type": "Double"
                },
                {
                  "name": "AvgShortTermFuelBank",
                  "type": "Double"
                },
                {
                  "name": "AvgLargeTermFuelBank",
                  "type": "Double"
                },
                {
                  "name": "MaxThrottlePosition",
                  "type": "Double"
                },
                {
                  "name": "AvgRelativeThrottlePosition",
                  "type": "Double"
                },
                {
                  "name": "Runtime",
                  "type": "Timespan"
                },
                {
                  "name": "DistancewithMIL",
                  "type": "Double"
                },
                {
                  "name": "EngineLoad",
                  "type": "Double"
                },
                {
                  "name": "MAFFlowRate",
                  "type": "Double"
                },
                {
                  "name": "OutsideTemperature",
                  "type": "Double"
                },
                {
                  "name": "EngineFuelRate",
                  "type": "Double"
                },
                {
                  "name": "vin",
                  "type": "String"
                }
              ],
              "published": false,
              "availability": {
                "frequency": "Day",
                "interval": 1
              }
            },
            "dependsOn": [
              "[resourceId('Microsoft.DataFactory/datafactories', variables('dataFactoryName'))]",
              "[resourceId('Microsoft.DataFactory/datafactories/linkedServices', variables('dataFactoryName'), variables('sqlAnalyticsLinkedServiceName'))]"
            ]
          },
          /* Dataset: FactTripMLInputData-Blob */
          {
            "apiVersion": "2015-10-01",
            "type": "datasets",
            "name": "[variables('datasetFactTripMLInputDataBlob')]",
            "properties": {
              "type": "AzureBlob",
              "linkedServiceName": "[variables('storageAsaLinkedServiceName')]",
              "typeProperties": {
                "folderPath": "tripdata/mlinput/000000_0",
                "format": {
                  "type": "TextFormat",
                  "rowDelimiter": "\n",
                  "columnDelimiter": ","
                }
              },
              "published": false,
              "availability": {
                "frequency": "Day",
                "interval": 1
              }
            },
            "dependsOn": [
              "[resourceId('Microsoft.DataFactory/datafactories', variables('dataFactoryName'))]",
              "[resourceId('Microsoft.DataFactory/datafactories/linkedServices', variables('dataFactoryName'), variables('storageAsaLinkedServiceName'))]"
            ]
          },
          /* Dataset: FactTripMLOutputData-Blob */
          {
            "apiVersion": "2015-10-01",
            "type": "datasets",
            "name": "[variables('datasetFactTripMLOutputDataBlob')]",
            "properties": {
              "type": "AzureBlob",
              "linkedServiceName": "[variables('storageAsaLinkedServiceName')]",
              "typeProperties": {
                "folderPath": "tripdata/mloutput",
                "format": {
                  "type": "TextFormat",
                  "rowDelimiter": "\n",
                  "columnDelimiter": ","
                }
              },
              "structure": [
                {
                  "name": "tripid",
                  "type": "String"
                },
                {
                  "name": "userid",
                  "type": "String"
                },
                {
                  "name": "drivertype",
                  "type": "String"
                }
              ],
              "published": false,
              "availability": {
                "frequency": "Day",
                "interval": 1
              }
            },
            "dependsOn": [
              "[resourceId('Microsoft.DataFactory/datafactories', variables('dataFactoryName'))]",
              "[resourceId('Microsoft.DataFactory/datafactories/linkedServices', variables('dataFactoryName'), variables('storageAsaLinkedServiceName'))]"
            ]
          },
          /* Dataset: MyDrivingRawData-Blob */
          {
            "apiVersion": "2015-10-01",
            "type": "datasets",
            "name": "[variables('datasetMyDrivingRawDataBlob')]",
            "properties": {
              "type": "AzureBlob",
              "linkedServiceName": "[variables('storageAsaLinkedServiceName')]",
              "typeProperties": {
                "folderPath": "rawdata/tripdata/{Year}/{Month}/{Day}",
                "format": {
                  "type": "TextFormat",
                  "rowDelimiter": "\n",
                  "columnDelimiter": ","
                },
                "partitionedBy": [
                  {
                    "name": "Year",
                    "value": {
                      "type": "DateTime",
                      "date": "SliceStart",
                      "format": "yyyy"
                    }
                  },
                  {
                    "name": "Month",
                    "value": {
                      "type": "DateTime",
                      "date": "SliceStart",
                      "format": "MM"
                    }
                  },
                  {
                    "name": "Day",
                    "value": {
                      "type": "DateTime",
                      "date": "SliceStart",
                      "format": "dd"
                    }
                  }
                ]
              },
              "structure": [
                {
                  "name": "TripId",
                  "type": "String"
                },
                {
                  "name": "UserId",
                  "type": "String"
                },
                {
                  "name": "Name",
                  "type": "String"
                },
                {
                  "name": "TripPointId",
                  "type": "String"
                },
                {
                  "name": "Lat",
                  "type": "Double"
                },
                {
                  "name": "Lon",
                  "type": "Double"
                },
                {
                  "name": "Speed",
                  "type": "Double"
                },
                {
                  "name": "RecordedTimeStamp",
                  "type": "Datetime"
                },
                {
                  "name": "Sequence",
                  "type": "Int32"
                },
                {
                  "name": "EngineRPM",
                  "type": "Double"
                },
                {
                  "name": "ShortTermFuelBank",
                  "type": "Double"
                },
                {
                  "name": "LargeTermFuelBank",
                  "type": "Double"
                },
                {
                  "name": "ThrottlePosition",
                  "type": "Double"
                },
                {
                  "name": "RelativeThrottlePosition",
                  "type": "Double"
                },
                {
                  "name": "Runtime",
                  "type": "Int32"
                },
                {
                  "name": "DistancewithMIL",
                  "type": "Double"
                },
                {
                  "name": "EngineLoad",
                  "type": "Double"
                },
                {
                  "name": "MAFFlowRate",
                  "type": "Double"
                },
                {
                  "name": "OutsideTemperature",
                  "type": "Double"
                },
                {
                  "name": "EngineFuelRate",
                  "type": "Double"
                },
                {
                  "name": "vin",
                  "type": "String"
                }
              ],
              "published": false,
              "availability": {
                "frequency": "Day",
                "interval": 1
              },
              "external": true,
              "policy": { }
            },
            "dependsOn": [
              "[resourceId('Microsoft.DataFactory/datafactories', variables('dataFactoryName'))]",
              "[resourceId('Microsoft.DataFactory/datafactories/linkedServices', variables('dataFactoryName'), variables('storageAsaLinkedServiceName'))]"
            ]
          },
          /* Dataset: RawDataOneSecAggregated */
          {
            "apiVersion": "2015-10-01",
            "type": "datasets",
            "name": "[variables('datasetRawDataOneSecAggregated')]",
            "properties": {
              "type": "AzureBlob",
              "linkedServiceName": "[variables('hdiMetastoreLinkedServiceName')]",
              "typeProperties": {
                "folderPath": "tripdata/onesecagg",
                "format": {
                  "type": "TextFormat"
                }
              },
              "published": false,
              "availability": {
                "frequency": "Day",
                "interval": 1
              }
            },
            "dependsOn": [
              "[resourceId('Microsoft.DataFactory/datafactories', variables('dataFactoryName'))]",
              "[resourceId('Microsoft.DataFactory/datafactories/linkedServices', variables('dataFactoryName'), variables('hdiMetastoreLinkedServiceName'))]"
            ]
          },
          /* Dataset: TempIntermediateDataset2-Blob */
          {
            "apiVersion": "2015-10-01",
            "type": "datasets",
            "name": "[variables('datasetTempIntermediateDataset2Blob')]",
            "properties": {
              "type": "AzureBlob",
              "linkedServiceName": "[variables('storageAsaLinkedServiceName')]",
              "typeProperties": {
                "folderPath": "rawdata/intermediatefolder/tempfile-2.txt",
                "format": {
                  "type": "TextFormat",
                  "columnDelimiter": ","
                }
              },
              "published": false,
              "availability": {
                "frequency": "Day",
                "interval": 1
              }
            },
            "dependsOn": [
              "[resourceId('Microsoft.DataFactory/datafactories', variables('dataFactoryName'))]",
              "[resourceId('Microsoft.DataFactory/datafactories/linkedServices', variables('dataFactoryName'), variables('storageAsaLinkedServiceName'))]"
            ]
          },
          /* Dataset: TempIntermediateDataset-Blob */
          {
            "apiVersion": "2015-10-01",
            "type": "datasets",
            "name": "[variables('datasetTempIntermediateDatasetBlob')]",
            "properties": {
              "type": "AzureBlob",
              "linkedServiceName": "[variables('storageAsaLinkedServiceName')]",
              "typeProperties": {
                "folderPath": "rawdata/intermediatefolder/tempfile.txt",
                "format": {
                  "type": "TextFormat",
                  "columnDelimiter": ","
                }
              },
              "published": false,
              "availability": {
                "frequency": "Day",
                "interval": 1
              }
            },
            "dependsOn": [
              "[resourceId('Microsoft.DataFactory/datafactories', variables('dataFactoryName'))]",
              "[resourceId('Microsoft.DataFactory/datafactories/linkedServices', variables('dataFactoryName'), variables('storageAsaLinkedServiceName'))]"
            ]
          },
          /* Pipeline: AzureMLPipeline */
          {
            "apiVersion": "2015-10-01",
            "type": "datapipelines",
            "name": "[variables('pipelineAzureML')]",
            "properties": {
              "description": "This Pipeline prepares data and passes it onto AzureML for batch scoring.",
              "activities": [
                {
                  "type": "HDInsightHive",
                  "name": "HiveActivityTemplate",
                  "linkedServiceName": "[variables('hdiOnDemandLinkedServiceName')]",
                  "typeProperties": {
                    "scriptPath": "[concat(variables('assetsContainerName'), '/', variables('hdInsightScriptsFolder'), '/mlinputdata.hql')]",
                    "scriptLinkedService": "[variables('hdiMetastoreLinkedServiceName')]",
                    "defines": {
                      "Year": "$$Text.Format('{0:yyyy}',SliceStart)",
                      "Month": "$$Text.Format('{0:MM}',SliceStart)",
                      "Day": "$$Text.Format('{0:dd}',SliceStart)"
                    }
                  },
                  "inputs": [
                    {
                      "name": "[variables('datasetRawDataOneSecAggregated')]"
                    }
                  ],
                  "outputs": [
                    {
                      "name": "[variables('datasetFactTripMLInputDataBlob')]"
                    }
                  ],
                  "policy": {
                    "timeout": "01:00:00",
                    "concurrency": 1,
                    "retry": 3
                  },
                  "scheduler": {
                    "frequency": "Day",
                    "interval": 1
                  }
                },
                {
                  "type": "AzureMLBatchExecution",
                  "name": "DriverType-AzureMLExecutionActivity",
                  "linkedServiceName": "[variables('mlLinkedServiceName')]",
                  "typeProperties": {
                    "webServiceInput": "[variables('datasetFactTripMLInputDataBlob')]",
                    "webServiceOutputs": {
                      "output1": "[variables('datasetFactTripMLOutputDataBlob')]"
                    },
                    "globalParameters": { }
                  },
                  "inputs": [
                    {
                      "name": "[variables('datasetFactTripMLInputDataBlob')]"
                    }
                  ],
                  "outputs": [
                    {
                      "name": "[variables('datasetFactTripMLOutputDataBlob')]"
                    }
                  ],
                  "policy": {
                    "timeout": "01:00:00",
                    "concurrency": 1,
                    "retry": 3
                  },
                  "scheduler": {
                    "frequency": "Day",
                    "interval": 1
                  }
                },
                {
                  "type": "Copy",
                  "name": "CopyActivityTemplate",
                  "typeProperties": {
                    "source": {
                      "type": "BlobSource"
                    },
                    "sink": {
                      "type": "SqlSink",
                      "writeBatchSize": 100,
                      "writeBatchTimeout": "00:25:00"
                    }
                  },
                  "inputs": [
                    {
                      "name": "[variables('datasetFactTripMLOutputDataBlob')]"
                    }
                  ],
                  "outputs": [
                    {
                      "name": "[variables('datasetFactTripMLDataSql')]"
                    }
                  ],
                  "policy": {
                    "timeout": "01:00:00",
                    "concurrency": 1,
                    "retry": 3
                  },
                  "scheduler": {
                    "frequency": "Day",
                    "interval": 1
                  }
                }
              ],
              "start": "2016-03-12T02:00:00Z",
              "end": "2016-06-04T02:00:00Z",
              "isPaused": false,
              "pipelineMode": "Scheduled"
            },
            "dependsOn": [
              "[resourceId('Microsoft.DataFactory/datafactories', variables('dataFactoryName'))]",
              "[resourceId('Microsoft.DataFactory/datafactories/linkedServices', variables('dataFactoryName'), variables('hdiMetastoreLinkedServiceName'))]",
              "[resourceId('Microsoft.DataFactory/datafactories/linkedServices', variables('dataFactoryName'), variables('hdiOnDemandLinkedServiceName'))]",
              "[resourceId('Microsoft.DataFactory/datafactories/linkedServices', variables('dataFactoryName'), variables('mlLinkedServiceName'))]",
              "[resourceId('Microsoft.DataFactory/datafactories/datasets', variables('dataFactoryName'), variables('datasetRawDataOneSecAggregated'))]",
              "[resourceId('Microsoft.DataFactory/datafactories/datasets', variables('dataFactoryName'), variables('datasetFactTripMLInputDataBlob'))]",
              "[resourceId('Microsoft.DataFactory/datafactories/datasets', variables('dataFactoryName'), variables('datasetFactTripMLOutputDataBlob'))]",
              "[resourceId('Microsoft.DataFactory/datafactories/datasets', variables('dataFactoryName'), variables('datasetFactTripMLDataSql'))]"
            ]
          },
          /* Pipeline: CopyPipeline-BlobToSQL */
          {
            "apiVersion": "2015-10-01",
            "type": "datapipelines",
            "name": "[variables('pipelineCopyBlobToSql')]",
            "properties": {
              "description": "Copies processed data from Blob to Temp SQL tables",
              "activities": [
                {
                  "type": "Copy",
                  "name": "DimUser-Data",
                  "typeProperties": {
                    "source": {
                      "type": "BlobSource"
                    },
                    "sink": {
                      "type": "SqlSink",
                      "writeBatchSize": 100,
                      "writeBatchTimeout": "00:20:00"
                    }
                  },
                  "inputs": [
                    {
                      "name": "[variables('datasetDimUserBlob')]"
                    }
                  ],
                  "outputs": [
                    {
                      "name": "[variables('datasetDimUserTempSql')]"
                    }
                  ],
                  "policy": {
                    "timeout": "01:00:00",
                    "concurrency": 1,
                    "retry": 3
                  },
                  "scheduler": {
                    "frequency": "Day",
                    "interval": 1
                  }
                },
                {
                  "type": "Copy",
                  "name": "FactData-Copy",
                  "typeProperties": {
                    "source": {
                      "type": "BlobSource"
                    },
                    "sink": {
                      "type": "SqlSink",
                      "writeBatchSize": 100,
                      "writeBatchTimeout": "00:20:00"
                    }
                  },
                  "inputs": [
                    {
                      "name": "[variables('datasetFactTripDataBlob')]"
                    },
                    {
                      "name": "[variables('datasetDimUserTempSql')]"
                    }
                  ],
                  "outputs": [
                    {
                      "name": "[variables('datasetFactTripDataTempSql')]"
                    }
                  ],
                  "policy": {
                    "timeout": "01:00:00",
                    "concurrency": 1,
                    "retry": 3
                  },
                  "scheduler": {
                    "frequency": "Day",
                    "interval": 1
                  }
                }
              ],
              "start": "2016-03-12T02:00:00Z",
              "end": "2016-06-04T02:00:00Z",
              "isPaused": false,
              "pipelineMode": "Scheduled"
            },
            "dependsOn": [
              "[resourceId('Microsoft.DataFactory/datafactories', variables('dataFactoryName'))]",
              "[resourceId('Microsoft.DataFactory/datafactories/datasets', variables('dataFactoryName'), variables('datasetDimUserBlob'))]",
              "[resourceId('Microsoft.DataFactory/datafactories/datasets', variables('dataFactoryName'), variables('datasetDimUserTempSql'))]",
              "[resourceId('Microsoft.DataFactory/datafactories/datasets', variables('dataFactoryName'), variables('datasetFactTripDataBlob'))]",
              "[resourceId('Microsoft.DataFactory/datafactories/datasets', variables('dataFactoryName'), variables('datasetDimUserTempSql'))]",
              "[resourceId('Microsoft.DataFactory/datafactories/datasets', variables('dataFactoryName'), variables('datasetFactTripDataTempSql'))]"
            ]
          },
          /* Pipeline: DimUserCompute-HDI */
          {
            "apiVersion": "2015-10-01",
            "type": "datapipelines",
            "name": "[variables('pipelineDimUserComputeHDI')]",
            "properties": {
              "description": "Populates the DimUser table in Azure SQL DB. HDI is used as the compute engine.",
              "activities": [
                {
                  "type": "HDInsightHive",
                  "name": "HiveActivityTemplate",
                  "linkedServiceName": "[variables('hdiOnDemandLinkedServiceName')]",
                  "typeProperties": {
                    "scriptPath": "[concat(variables('assetsContainerName'), '/', variables('hdInsightScriptsFolder'), '/dimUserUpdate.hql')]",
                    "scriptLinkedService": "[variables('hdiMetastoreLinkedServiceName')]",
                    "defines": {
                      "Year": "$$Text.Format('{0:yyyy}',SliceStart)",
                      "Month": "$$Text.Format('{0:MM}',SliceStart)",
                      "Day": "$$Text.Format('{0:dd}',SliceStart)"
                    }
                  },
                  "inputs": [
                    {
                      "name": "[variables('datasetMyDrivingRawDataBlob')]"
                    },
                    {
                      "name": "[variables('datasetTempIntermediateDataset2Blob')]"
                    }
                  ],
                  "outputs": [
                    {
                      "name": "[variables('datasetDimUserBlob')]"
                    }
                  ],
                  "policy": {
                    "timeout": "01:00:00",
                    "concurrency": 1,
                    "retry": 3
                  },
                  "scheduler": {
                    "frequency": "Day",
                    "interval": 1
                  }
                }
              ],
              "start": "2016-03-12T02:00:00Z",
              "end": "2016-06-04T02:00:00Z",
              "isPaused": true,
              "pipelineMode": "Scheduled"
            },
            "dependsOn": [
              "[resourceId('Microsoft.DataFactory/datafactories', variables('dataFactoryName'))]",
              "[resourceId('Microsoft.DataFactory/datafactories/linkedServices', variables('dataFactoryName'), variables('hdiMetastoreLinkedServiceName'))]",
              "[resourceId('Microsoft.DataFactory/datafactories/linkedServices', variables('dataFactoryName'), variables('hdiOnDemandLinkedServiceName'))]",
              "[resourceId('Microsoft.DataFactory/datafactories/datasets', variables('dataFactoryName'), variables('datasetMyDrivingRawDataBlob'))]",
              "[resourceId('Microsoft.DataFactory/datafactories/datasets', variables('dataFactoryName'), variables('datasetTempIntermediateDataset2Blob'))]",
              "[resourceId('Microsoft.DataFactory/datafactories/datasets', variables('dataFactoryName'), variables('datasetDimUserBlob'))]"
            ]
          },
          /* Pipeline: FactTripDataCompute-HDI */
          {
            "apiVersion": "2015-10-01",
            "type": "datapipelines",
            "name": "[variables('pipelineFactTripDataComputeHDI')]",
            "properties": {
              "description": "This pipeline executes the hive queries needed to transform the data.",
              "activities": [
                {
                  "type": "HDInsightHive",
                  "name": "factTripData-Hive",
                  "linkedServiceName": "[variables('hdiOnDemandLinkedServiceName')]",
                  "typeProperties": {
                    "scriptPath": "[concat(variables('assetsContainerName'), '/', variables('hdInsightScriptsFolder'), '/factTripData.hql')]",
                    "scriptLinkedService": "[variables('hdiMetastoreLinkedServiceName')]",
                    "defines": {
                      "Year": "$$Text.Format('{0:yyyy}',SliceStart)",
                      "Month": "$$Text.Format('{0:MM}',SliceStart)",
                      "Day": "$$Text.Format('{0:dd}',SliceStart)"
                    }
                  },
                  "inputs": [
                    {
                      "name": "[variables('datasetRawDataOneSecAggregated')]"
                    }
                  ],
                  "outputs": [
                    {
                      "name": "[variables('datasetFactTripDataBlob')]"
                    }
                  ],
                  "policy": {
                    "timeout": "01:00:00",
                    "concurrency": 1,
                    "retry": 3
                  },
                  "scheduler": {
                    "frequency": "Day",
                    "interval": 1
                  }
                }
              ],
              "start": "2016-03-12T02:00:00Z",
              "end": "2016-06-04T02:00:00Z",
              "isPaused": true,
              "pipelineMode": "Scheduled"
            },
            "dependsOn": [
              "[resourceId('Microsoft.DataFactory/datafactories', variables('dataFactoryName'))]",
              "[resourceId('Microsoft.DataFactory/datafactories/linkedServices', variables('dataFactoryName'), variables('hdiMetastoreLinkedServiceName'))]",
              "[resourceId('Microsoft.DataFactory/datafactories/linkedServices', variables('dataFactoryName'), variables('hdiOnDemandLinkedServiceName'))]",
              "[resourceId('Microsoft.DataFactory/datafactories/datasets', variables('dataFactoryName'), variables('datasetRawDataOneSecAggregated'))]",
              "[resourceId('Microsoft.DataFactory/datafactories/datasets', variables('dataFactoryName'), variables('datasetFactTripDataBlob'))]"
            ]
          },
          /* Pipeline: SetupHiveTablesPipeline */
          {
            "apiVersion": "2015-10-01",
            "type": "datapipelines",
            "name": "[variables('pipelineSetupHiveTables')]",
            "properties": {
              "description": "This pipeline setups up the base table and the necessary partitions for the hive table",
              "activities": [
                {
                  "type": "HDInsightHive",
                  "name": "CreateTableHive",
                  "linkedServiceName": "[variables('hdiOnDemandLinkedServiceName')]",
                  "typeProperties": {
                    "scriptPath": "[concat(variables('assetsContainerName'), '/', variables('hdInsightScriptsFolder'), '/CreateRawTable.hql')]",
                    "scriptLinkedService": "[variables('hdiMetastoreLinkedServiceName')]",
                    "defines": {
                      "Year": "$$Text.Format('{0:yyyy}',SliceStart)",
                      "Month": "$$Text.Format('{0:MM}',SliceStart)",
                      "Day": "$$Text.Format('{0:dd}',SliceStart)"
                    }
                  },
                  "inputs": [
                    {
                      "name": "[variables('datasetMyDrivingRawDataBlob')]"
                    }
                  ],
                  "outputs": [
                    {
                      "name": "[variables('datasetTempIntermediateDatasetBlob')]"
                    }
                  ],
                  "policy": {
                    "timeout": "01:00:00",
                    "concurrency": 1,
                    "retry": 3
                  },
                  "scheduler": {
                    "frequency": "Day",
                    "interval": 1
                  }
                },
                {
                  "type": "HDInsightHive",
                  "name": "AddPartitionsHive",
                  "linkedServiceName": "[variables('hdiOnDemandLinkedServiceName')]",
                  "typeProperties": {
                    "scriptPath": "[concat(variables('assetsContainerName'), '/', variables('hdInsightScriptsFolder'), '/AddPartitionsHive.hql')]",
                    "scriptLinkedService": "[variables('hdiMetastoreLinkedServiceName')]",
                    "defines": {
                      "Year": "$$Text.Format('{0:yyyy}',Date.AddDays(SliceStart, -1))",
                      "Month": "$$Text.Format('{0:MM}',Date.AddDays(SliceStart, -1))",
                      "Day": "$$Text.Format('{0:dd}',Date.AddDays(SliceStart, -1))"
                    }
                  },
                  "inputs": [
                    {
                      "name": "[variables('datasetTempIntermediateDatasetBlob')]"
                    }
                  ],
                  "outputs": [
                    {
                      "name": "[variables('datasetTempIntermediateDataset2Blob')]"
                    }
                  ],
                  "policy": {
                    "timeout": "01:00:00",
                    "concurrency": 1,
                    "retry": 3
                  },
                  "scheduler": {
                    "frequency": "Day",
                    "interval": 1
                  }
                },
                {
                  "type": "HDInsightHive",
                  "name": "AggOneSecData",
                  "linkedServiceName": "[variables('hdiOnDemandLinkedServiceName')]",
                  "typeProperties": {
                    "scriptPath": "[concat(variables('assetsContainerName'), '/', variables('hdInsightScriptsFolder'), '/TripDataInt.hql')]",
                    "scriptLinkedService": "[variables('hdiMetastoreLinkedServiceName')]",
                    "defines": {
                      "Year": "$$Text.Format('{0:yyyy}',SliceStart)",
                      "Month": "$$Text.Format('{0:MM}',SliceStart)",
                      "Day": "$$Text.Format('{0:dd}',SliceStart)"
                    }
                  },
                  "inputs": [
                    {
                      "name": "[variables('datasetTempIntermediateDataset2Blob')]"
                    },
                    {
                      "name": "[variables('datasetMyDrivingRawDataBlob')]"
                    }
                  ],
                  "outputs": [
                    {
                      "name": "[variables('datasetRawDataOneSecAggregated')]"
                    }
                  ],
                  "policy": {
                    "timeout": "01:00:00",
                    "concurrency": 1,
                    "retry": 3
                  },
                  "scheduler": {
                    "frequency": "Day",
                    "interval": 1
                  }
                }
              ],
              "start": "2016-03-12T02:00:00Z",
              "end": "2016-06-04T02:00:00Z",
              "isPaused": true,
              "pipelineMode": "Scheduled"
            },
            "dependsOn": [
              "[resourceId('Microsoft.DataFactory/datafactories', variables('dataFactoryName'))]",
              "[resourceId('Microsoft.DataFactory/datafactories/linkedServices', variables('dataFactoryName'), variables('hdiMetastoreLinkedServiceName'))]",
              "[resourceId('Microsoft.DataFactory/datafactories/linkedServices', variables('dataFactoryName'), variables('hdiOnDemandLinkedServiceName'))]",
              "[resourceId('Microsoft.DataFactory/datafactories/datasets', variables('dataFactoryName'), variables('datasetMyDrivingRawDataBlob'))]",
              "[resourceId('Microsoft.DataFactory/datafactories/datasets', variables('dataFactoryName'), variables('datasetTempIntermediateDatasetBlob'))]",
              "[resourceId('Microsoft.DataFactory/datafactories/datasets', variables('dataFactoryName'), variables('datasetTempIntermediateDataset2Blob'))]",
              "[resourceId('Microsoft.DataFactory/datafactories/datasets', variables('dataFactoryName'), variables('datasetMyDrivingRawDataBlob'))]",
              "[resourceId('Microsoft.DataFactory/datafactories/datasets', variables('dataFactoryName'), variables('datasetRawDataOneSecAggregated'))]"
            ]
          },
          /* Pipeline: SQLSprocPipeline */
          {
            "apiVersion": "2015-10-01",
            "type": "datapipelines",
            "name": "[variables('pipelineSQLSproc')]",
            "properties": {
              "description": "This SP will be used to move data from the Temp SQL Tables to the actual tables",
              "activities": [
                {
                  "type": "SqlServerStoredProcedure",
                  "name": "DimUser-SP",
                  "typeProperties": {
                    "storedProcedureName": "sp_mergeDimUser",
                    "storedProcedureParameters": { }
                  },
                  "inputs": [
                    {
                      "name": "[variables('datasetDimUserTempSql')]"
                    }
                  ],
                  "outputs": [
                    {
                      "name": "[variables('datasetDimUserSql')]"
                    }
                  ],
                  "policy": {
                    "timeout": "01:00:00",
                    "concurrency": 1,
                    "retry": 3
                  },
                  "scheduler": {
                    "frequency": "Day",
                    "interval": 1
                  }
                },
                {
                  "type": "SqlServerStoredProcedure",
                  "name": "FactTripData-SP",
                  "typeProperties": {
                    "storedProcedureName": "sp_mergeFactTripData"
                  },
                  "inputs": [
                    {
                      "name": "[variables('datasetFactTripDataTempSql')]"
                    },
                    {
                      "name": "[variables('datasetDimUserSql')]"
                    },
                    {
                      "name": "[variables('datasetFactTripMLDataSql')]"
                    }
                  ],
                  "outputs": [
                    {
                      "name": "[variables('datasetFactTripDataSql')]"
                    }
                  ],
                  "policy": {
                    "timeout": "01:00:00",
                    "concurrency": 1,
                    "retry": 3
                  },
                  "scheduler": {
                    "frequency": "Day",
                    "interval": 1
                  }
                }
              ],
              "start": "2016-03-12T02:00:00Z",
              "end": "2016-06-04T02:00:00Z",
              "isPaused": false,
              "pipelineMode": "Scheduled"
            },
            "dependsOn": [
              "[resourceId('Microsoft.DataFactory/datafactories', variables('dataFactoryName'))]",
              "[resourceId('Microsoft.DataFactory/datafactories/datasets', variables('dataFactoryName'), variables('datasetDimUserTempSql'))]",
              "[resourceId('Microsoft.DataFactory/datafactories/datasets', variables('dataFactoryName'), variables('datasetDimUserSql'))]",
              "[resourceId('Microsoft.DataFactory/datafactories/datasets', variables('dataFactoryName'), variables('datasetFactTripDataTempSql'))]",
              "[resourceId('Microsoft.DataFactory/datafactories/datasets', variables('dataFactoryName'), variables('datasetDimUserSql'))]",
              "[resourceId('Microsoft.DataFactory/datafactories/datasets', variables('dataFactoryName'), variables('datasetFactTripMLDataSql'))]",
              "[resourceId('Microsoft.DataFactory/datafactories/datasets', variables('dataFactoryName'), variables('datasetFactTripDataSql'))]"
            ]
          }
        ]
      }
    ],
    "outputs": {
      "databaseConnectionDB": {
        "type": "string",
        "value": "[concat('Data Source=tcp:', reference(concat('Microsoft.Sql/servers/', variables('sqlServerName'))).fullyQualifiedDomainName, ',1433;Initial Catalog=', variables('sqlDBName'), ';User Id=', variables('sqlServerAdminLogin'), '@', variables('sqlServerName'), ';Password=', parameters('sqlServerAdminPassword'), ';')]"
      },
      "databaseConnectionSQL": {
        "type": "string",
        "value": "[concat('Data Source=tcp:', reference(concat('Microsoft.Sql/servers/', variables('sqlAnalyticsServerName'))).fullyQualifiedDomainName, ',1433;Initial Catalog=', variables('sqlAnalyticsDBName'), ';User Id=', variables('sqlAnalyticsServerAdminLogin'), '@', variables('sqlAnalyticsServerName'), ';Password=', parameters('sqlAnalyticsServerAdminPassword'), ';')]"
      }
    }
  }